// TODO:
// Track users course progress 
// Remake discounts/coupons

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?   @default("https://fakeimg.pl/96x96?text=Image&font=bebas")
  role          Role      @default(USER)

  accounts        Account[]
  enrolledCourses CourseEnrollment[]
  createdCourses  Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refreshToken")
  accessToken       String? @map("accessToken")
  expiresAt         Int?    @map("expiresAt")
  tokenType         String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Course {
  id               String  @id @default(cuid())
  title            String
  slug             String  @unique
  description      String?
  price            Float?
  imageUrl         String?
  imageBlurDataUrl String?
  isPublished      Boolean @default(false)

  instructor        User               @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId      String
  chapters          Chapter[]
  lessons           Lesson[]
  courseEnrollments CourseEnrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String  @id @default(cuid())
  title       String
  order       Int /// The order a chapter should be displayed in
  isPublished Boolean @default(false)

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, order])
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  slug        String
  description String?
  videoUrl    String?
  length      Int? /// Lesson length in seconds
  order       Int /// The order a lesson should be displayed in
  isPublished Boolean @default(false)

  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chapterId, order])
  @@unique([chapterId, slug])
}

model CourseEnrollment {
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([studentId, courseId])
}
