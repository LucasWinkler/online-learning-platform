generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  USER
  ADMIN
}

enum ContentType {
  TEXT
  VIDEO
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  role       Role     @default(USER)
  isVerified Boolean  @default(false)
  image      String?  @default("https://fakeimg.pl/96x96?text=Image&font=bebas")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  enrolledCourses  CourseEnrollment[]
  createdCourses   Course[]
  createdDiscounts Discount[]
}

model Discount {
  id           Int      @id @default(autoincrement())
  name         String
  percentage   Float
  instructor   User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  discountedCourses Course[]
}

model Course {
  id           Int       @id @default(autoincrement())
  title        String
  slug         String    @unique
  description  String
  price        Float
  thumbnail    String?   @default("https://fakeimg.pl/300x170?text=Thumbnail&font=bebas")
  discount     Discount? @relation(fields: [discountId], references: [id], onDelete: SetNull)
  discountId   Int?
  instructor   User      @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  chapters          Chapter[]
  lessons           Lesson[]
  courseEnrollments CourseEnrollment[]
}

model Chapter {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
  order     Int /// The order a chapter should be displayed in
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons Lesson[]

  @@unique([courseId, order])
  @@unique([courseId, slug])
}

model Lesson {
  id           Int         @id @default(autoincrement())
  title        String
  slug         String
  description  String
  contentType  ContentType
  textContent  String? /// Markdown
  videoContent String? /// Video URL
  length       Int /// Lesson length in seconds
  order        Int /// The order a lesson should be displayed
  course       Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     Int
  chapter      Chapter     @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId    Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([chapterId, order])
  @@unique([chapterId, slug])
  @@unique([textContent, videoContent, chapterId])
}

model CourseEnrollment {
  id        Int      @id @default(autoincrement())
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
