generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         Int      @id @default(autoincrement())
  role       Role     @default(USER)
  name       String
  email      String   @unique
  isVerified Boolean  @default(false)
  image      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  courses          Course[]
  courseEnrollment CourseEnrollment[]
}

model Course {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  thumbnail    String
  price        Float
  discount     Discount? @relation(fields: [discountId], references: [id])
  discountId   Int?
  slug         String    @unique
  instructor   User      @relation(fields: [instructorId], references: [id])
  instructorId Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  chapters         Chapter[]
  courseEnrollment CourseEnrollment[]
}

model Discount {
  id         Int      @id @default(autoincrement())
  name       String
  percentage Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  courses Course[]
}

model Chapter {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  order     Int /// The order a chapter should be displayed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons Lesson[]

  @@unique([courseId, order])
}

model Lesson {
  id              Int           @id @default(autoincrement())
  title           String
  slug            String        @unique
  description     String
  content         LessonContent @relation(fields: [lessonContentId], references: [id])
  lessonContentId Int
  chapter         Chapter       @relation(fields: [chapterId], references: [id])
  chapterId       Int
  order           Int /// The order a lesson should be displayed
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([chapterId, order])
}

model LessonContent {
  id             Int           @id @default(autoincrement())
  text           TextContent?  @relation(fields: [textContentId], references: [id])
  textContentId  Int?
  video          VideoContent? @relation(fields: [videoContentId], references: [id])
  videoContentId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  lesson Lesson[]
}

model TextContent {
  id        Int      @id @default(autoincrement())
  body      String
  length    Int /// Length in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessonContent LessonContent[]
}

model VideoContent {
  id        Int      @id @default(autoincrement())
  url       String
  length    Int /// Length in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessonContent LessonContent[]
}

model CourseEnrollment {
  id        Int      @id @default(autoincrement())
  student   User     @relation(fields: [studentId], references: [id])
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
