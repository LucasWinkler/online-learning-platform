// TODO:
// Track users course progress 
// Create discounts/coupons

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  role                  Role                   @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts        Account[]
  enrolledCourses CourseEnrollment[]
  createdCourses  Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String /// The user's email
  token      String

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@id([identifier, token])
}

model PasswordResetToken {
  identifier String /// The user's email
  token      String

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@id([identifier, token])
}

model TwoFactorToken {
  identifier String /// The user's email
  token      String

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@id([identifier, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())

  @@unique([userId])
}

model Course {
  id            String  @id @default(cuid())
  title         String
  slug          String  @unique
  description   String?
  price         Float   @default(0)
  image         String?
  imageBlurData String?

  instructor        User               @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId      String
  chapters          Chapter[]
  lessons           Lesson[]
  courseEnrollments CourseEnrollment[]

  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Chapter {
  id    String @id @default(cuid())
  title String
  order Int /// The order a chapter should be displayed in

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]

  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // @@unique([courseId, order])
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  description String?
  video       String?
  length      Int? /// Lesson length in seconds
  order       Int /// The order a lesson should be displayed in

  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CourseEnrollment {
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([studentId, courseId])
}
